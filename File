/*
func setupGL() {
let vertices:Array<[GLfloat]> = [
[-1.0,  1.0, 0.0],
[ 1.0,  1.0, 0.0],
[-1.0, 1.0, 0.0],
[-1.0, -1.0, 0.0]
];


let indices:[GLubyte] = [
0, 1, 2,
2, 3, 0
];

glGenBuffers(1, &self._vertexBuffer);

glBindBuffer(GLenum(GL_ARRAY_BUFFER), self._vertexBuffer);

glBufferData(GLenum(GL_ARRAY_BUFFER), sizeof(GLfloat)*12, vertices, GLenum(GL_STATIC_DRAW));

glGenBuffers(1, &self._indexBuffer);
glBindBuffer(GLenum(GL_ELEMENT_ARRAY_BUFFER), self._indexBuffer);
glBufferData(GLenum(GL_ELEMENT_ARRAY_BUFFER), sizeof(GLubyte)*6, indices, GLenum(GL_STATIC_DRAW));

}
*/


//helper extensions to pass arguments to GL land
/*
//let size = CGSize(width: 500,height: 500);
self.textureG += 0.01

glClearColor(self.textureG, 0.3, 0.9, 1.0)
glColor4f(0.0, 1.0, 0.0, 0.0);

glClear(GLbitfield(GL_COLOR_BUFFER_BIT) | GLbitfield(GL_DEPTH_BUFFER_BIT))

// Transform image
let rot:GLfloat = 0.0;

glEnableClientState(GLbitfield(GL_VERTEX_ARRAY));

let vertices:Array<[GLfloat]> = [
[-1.0,  1.0, 0.0],
[ 1.0,  1.0, 0.0],
[-1.0, -1.0, 0.0],
[ 1.0, -1.0, 0.0]
];

let normals:Array<[GLfloat]> = [
[0.0,  0.0, 1.0],
[ 0.0, 0.0, 1.0],
[0.0, 0.0, 1.0],
[0.0, 0.0, 1.0]
];

let texCoords:Array<GLfloat> = [
0.0, 1.0,
1.0, 1.0,
0.0, 0.0,
1.0, 0.0
];

glLoadIdentity();
glTranslatef(0.0, 0.0, 0.0);
//glRotatef(rot, 1.0, 1.0, 1.0);

glVertexPointer(GLint(3), GLenum(GL_FLOAT), GLsizei(0), vertices);
//glNormalPointer(GLenum(GL_FLOAT), 0, normals);

//glTexCoordPointer(GLint(2), GLenum(GL_FLOAT), GLsizei(0), texCoords);
glDrawArrays(GLenum(GL_TRIANGLE_STRIP), GLint(0), GLsizei(4));

/*
glDisableClientState(GLenum(GL_VERTEX_ARRAY));
glDisableClientState(GLenum(GL_NORMAL_ARRAY));
glDisableClientState(GLenum(GL_TEXTURE_COORD_ARRAY));
*/
/*
static NSTimeInterval lastDrawTime;
if (lastDrawTime)
{
NSTimeInterval timeSinceLastDraw = [NSDate timeIntervalSinceReferenceDate] - lastDrawTime;
rot+=  60 * timeSinceLastDraw;
}
lastDrawTime = [NSDate timeIntervalSinceReferenceDate];
*/

/*
func createTextures(){
let inImage = self.pic.CGImage;
//Get image width, height
let pixelsWide = CGImageGetWidth(inImage)
let pixelsHigh = CGImageGetHeight(inImage)
// Declare the number of bytes per row. Each pixel in the bitmap in this example is represented by 4 bytes; 8 bits each of red, green, blue, and alpha.
let bitmapBytesPerRow = Int(pixelsWide) * 4
let bitmapByteCount = bitmapBytesPerRow * Int(pixelsHigh)
// Use the generic RGB color space.
let colorSpace = CGColorSpaceCreateDeviceRGB()
// Allocate memory for image data. This is the destination in memory where any drawing to the bitmap context will be rendered.
let bitmapData = malloc(bitmapByteCount)
let bitmapInfo = CGBitmapInfo(rawValue: CGImageAlphaInfo.PremultipliedFirst.rawValue)
// Create the bitmap context. We want pre-multiplied ARGB, 8-bits per component. Regardless of what the source image format is (CMYK, Grayscale, and so on) it will be converted over to the format  specified here by CGBitmapContextCreate.
let spriteContext = CGBitmapContextCreate(bitmapData, pixelsWide, pixelsHigh, 8, bitmapBytesPerRow, colorSpace, bitmapInfo)


var texBuffer = malloc( pixelsHigh * pixelsWide * 4 );
self.texture = [];
self.texture.append(GLuint());

CGContextClearRect(spriteContext, CGRectMake(CGFloat(0), CGFloat(0), CGFloat(pixelsWide), CGFloat(pixelsHigh)));
CGContextTranslateCTM(spriteContext, CGFloat(0), CGFloat(pixelsHigh - pixelsHigh));
CGContextDrawImage(spriteContext, CGRectMake(CGFloat(0), CGFloat(0), CGFloat(pixelsWide), CGFloat(pixelsHigh)), inImage);

glEnable(GLbitfield(GL_TEXTURE_2D));
glEnable(GLbitfield(GL_BLEND));
glBlendFunc(GLbitfield(GL_ONE), GLbitfield(GL_SRC_COLOR));


glGenTextures(1, &self.texture[0]);
glBindTexture(GLbitfield(GL_TEXTURE_2D), self.texture[0]);

glTexParameteri(GLbitfield(GL_TEXTURE_2D), GLbitfield(GL_TEXTURE_MIN_FILTER), GL_NEAREST);

//glTexImage2D(GLenum(GL_TEXTURE_2D), GLint(0), GLenum(GL_RGBA), GLsizei(pixelsWide), GLsizei(pixelsHigh), GLint(0), GLenum(GL_RGBA), GLenum(GL_UNSIGNED_BYTE), inImage);
glTexImage2D(GLenum(GL_TEXTURE_2D), GLint(0), GLint(GL_RGBA), GLsizei(pixelsWide), GLsizei(pixelsHigh), GLint(0), GLenum(GL_RGBA), GLenum(GL_UNSIGNED_BYTE), texBuffer);        //CGContextRelease(context);

free(texBuffer);
}
*/